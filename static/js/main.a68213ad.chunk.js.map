{"version":3,"sources":["logo.svg","PostsList.js","PostDetail.js","PostList2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PostsList","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","posts","inherits","createClass","key","value","_this2","fetch","then","response","json","slice","setState","map","post","react_default","a","createElement","react_router_dom","to","pathname","id","title","style","hidden","navigator","userAgent","React","Component","PostDetail","body","props","match","params","width","src","image","Helmet","name","content","property","App","className","react_router","path","exact","component","Boolean","window","location","hostname","rootElement","document","getElementById","hasChildNodes","hydrate","src_App","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a68213ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport queryString from 'query-string'\nexport class PostsList extends React.Component {\n    state = {\n        posts: []\n    }\n\n    componentDidMount() {\n        fetch('https://5cef52c45660c40014948b7e.mockapi.io/posts')\n          .then(response => response.json())\n          .then(posts => posts.slice(0,4))\n          .then(posts => this.setState({posts}));\n    }\n\n    // componentDidUpdate (prevProps) {\n    //     if (this.props.location.search !== prevProps.location.search) {\n    //         const values = queryString.parse(this.props.location.search)\n    //         this.getMoreData(values.page)\n    //     }\n    // }\n\n    // getMoreData(page) {\n    //     fetch('https://jsonplaceholder.typicode.com/posts')\n    //       .then(response => response.json())\n    //       .then(posts => posts.slice(page * 10 - 10, page * 10))\n    //       .then(posts => this.setState({posts}));\n    // }\n\n    render() {\n        const posts = this.state.posts.map(post => <div><Link to={{pathname: `/posts/${post.id}`}}>{post.title}</Link></div>)\n        return (\n            <div style={{hidden: navigator.userAgent === \"ReactSnap\"}}>\n                <h2>All posts</h2>\n                {posts}\n                {/* <ul class=\"pagination\">\n                    <Link to={{ pathname: '/', search: '?page=1'}}>1</Link>\n                    <Link to={{ pathname: '/', search: '?page=2'}}>2</Link>\n                    <Link to={{ pathname: '/', search: '?page=3'}}>3</Link>\n                </ul> */}\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\nexport class PostDetail extends React.Component {\n    state = {\n        post: {body: '', title: ''}\n    }\n\n    componentDidMount() {\n        fetch('https://5cef52c45660c40014948b7e.mockapi.io/posts')\n            .then(response => response.json())\n            .then(posts => this.setState({post: posts[this.props.match.params.id - 1]}))\n    }\n\n    render() {\n        return(\n            <div style={{hidden: navigator.userAgent === \"ReactSnap\"}}>\n                <h2>{this.state.post.title}</h2>\n                <img style={{width: '500px'}} src={this.state.post.image}></img>\n                <article>{this.state.post.body}</article>\n                <p><Link to=\"/\">Back to all articles</Link></p>\n                <Helmet>\n                    <title>{this.state.post.title}</title>\n                    <meta name=\"google-site-verification\" content=\"Cig7qdZyPb9u87kA3w4s2SMG5uSpKqC2iHk1GTWbdMU\"></meta>\n                    <meta name=\"description\" content={this.state.post.body.slice(0,100)} />\n                    <meta property=\"og:type\"               content=\"article\" />\n                    <meta property=\"og:title\"              content={this.state.post.title} />\n                    <meta property=\"og:description\"        content={this.state.post.body} />\n                    <meta property=\"og:image\"              content={this.state.post.image} />\n                </Helmet>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport queryString from 'query-string'\nexport class PostsList2 extends React.Component {\n    state = {\n        posts: []\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n          .then(response => response.json())\n          .then(posts => posts.slice(60,70))\n          .then(posts => this.setState({posts}));\n    }\n\n    componentDidUpdate (prevProps) {\n        if (this.props.location.search !== prevProps.location.search) {\n            const values = queryString.parse(this.props.location.search)\n            this.getMoreData(values.page)\n        }\n    }\n\n    getMoreData(page) {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n          .then(response => response.json())\n          .then(posts => posts.slice(page * 60 - 10, page * 60))\n          .then(posts => this.setState({posts}));\n    }\n\n    render() {\n        const posts = this.state.posts.map(post => <div><Link to={{pathname: `/newpage/${post.id}`}}>{post.title}</Link></div>)\n        return (\n            <div>\n                <h2>All posts 2</h2>\n                {posts}\n                <ul class=\"pagination\">\n                    <Link to={{ pathname: '/', search: '?page=1'}}>4</Link>\n                    <Link to={{ pathname: '/', search: '?page=2'}}>5</Link>\n                    <Link to={{ pathname: '/', search: '?page=3'}}>6</Link>\n                </ul>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { PostsList } from './PostsList';\nimport {PostDetail} from './PostDetail';\nimport {PostsList2} from './PostList2';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={PostsList} />\n          <Route path=\"/posts/:id\" exact component={PostDetail} />\n          {/* <Route path=\"/newpage\" exact component={PostsList2} /> */}\n        </Switch>\n      </BrowserRouter>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {hydrate, render} from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}